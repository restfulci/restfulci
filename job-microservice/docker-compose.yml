version: "3"
services:

  postgres:
    image: postgres:12.1
    volumes:
      - ./database/setup.sql:/docker-entrypoint-initdb.d/setup.sql
    environment:
      # TODO: Change name from `restfulci` to `restfulci-job`
      - POSTGRES_DB=restfulci
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    restart: always

  rabbitmq:
    image: rabbitmq:3.8.2-management
    # TODO:
    # add queue setup:
    # https://stackoverflow.com/a/42251266/2467072
    # https://devops.datenkollektiv.de/creating-a-custom-rabbitmq-container-with-preconfigured-queues.html
    # https://medium.com/@thomasdecaux/deploy-rabbitmq-with-docker-static-configuration-23ad39cdbf39
    ports:
      - "15673:15672"

  minio:
    image: minio/minio:RELEASE.2020-04-02T21-34-49Z
    environment:
      - MINIO_ACCESS_KEY=restfulci
      - MINIO_SECRET_KEY=secretpassword
    command: server /data

  master-api-server:
    # image: restfulci/master-api-server:23163d0d60250397bed88a7ddd378c16faedf5c1
    build:
      context: ./master-api
      dockerfile: ./Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8881:8080"
    depends_on:
      - postgres
      - rabbitmq
      - minio
    tty: true
    restart: always

  slave-executor:
    # image: restfulci/slave-executor:23163d0d60250397bed88a7ddd378c16faedf5c1
    build:
      context: ./slave-agent
      dockerfile: ./Dockerfile
    volumes:
      # Run not as docker-in-docker but as sibling of host docker.
      # https://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/
      #
      # But this also mean we only enable UNIX socket.
      # https://docs.docker.com/engine/security/https/
      # > docker -H unix:///var/run/docker.sock version     # Works
      # > docker -H tcp://localhost:2375 version            # Doesn't work
      #
      # docker image provides a way to enable TCP socket, but that requires
      # docker-in-docker.
      #
      # TODO:
      # Investigate the possibility to use HTTP socket.
      - /var/run/docker.sock:/var/run/docker.sock
      # We'll need to pass out the result as docker volume inside of this container.
      # As docker image uses Alpine (so `Files.createTempDirectory` uses `/tmp`)
      # and actual docker is running in host, we'll need to map the host `/tmp`
      # back to container so the Java application inside of container can see the
      # change.
      #
      # TODO:
      # Consider using a directory other than the default of `Files.createTempDirectory`,
      # so we don't need to volume mount `/tmp` which is used by a lot of other
      # applications both in host machine and inside of the container.
      - /tmp:/tmp
      # SSH agent forwarding.
      #
      # Doesn't work for mac: https://github.com/docker/for-mac/issues/410
      # There's a solution https://github.com/uber-common/docker-ssh-agent-forward
      # but I have not investigate it.
      #
      # Have not tested in Linux.
      #
      # TODO:
      # Need to find a solution when setting up infrastructure in Kubernetes.
      - $SSH_AUTH_SOCK:${SSH_AUTH_SOCK}
    environment:
      - SSH_AUTH_SOCK
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres
      - rabbitmq
      - minio
    tty: true
    restart: always

  keycloak:
    image: quay.io/keycloak/keycloak:11.0.2
    ports:
      - "8880:8080"
    environment:
      KEYCLOAK_USER: restfulci
      KEYCLOAK_PASSWORD: secretpassword
      KEYCLOAK_IMPORT: "/tmp/realm.json -Dkeycloak.profile.feature.upload_scripts=enabled"
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak-postgres
      DB_DATABASE: keycloak
      DB_USER: postgres
      DB_PASSWORD: postgres
    volumes:
      - ../auth-microservice/realm.json:/tmp/realm.json
    depends_on:
      - keycloak-postgres

  keycloak-postgres:
    image: postgres:12.1
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    restart: always
