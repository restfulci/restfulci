version: 2.1

executors:
  java-executor:
    docker:
      - image: circleci/openjdk:11.0.2-jdk
        environment:
          TEST_DATABASE_URL: postgresql://postgres@localhost/restfulci

      - image: postgres:12.1
        environment:
          POSTGRES_PASSWORD: postgres

      - image: rabbitmq:3.8.2

    working_directory: /tmp/java

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

  python-executor:
    docker:
      - image: circleci/python:3.7.3

    working_directory: ~/python

orbs:
  inline-postgres:
    commands:
      initialize:
        steps:
          - run: sudo apt-get update || sudo apt-get update && sudo apt install postgresql-client
          - run: psql -U postgres -h localhost -p 5432 -w -c "CREATE DATABASE restfulci OWNER postgres;"
          - run: psql -U postgres -h localhost -d restfulci -p 5432 -w -f database/setup.sql

  inline-minio:
    commands:
      installation:
        steps:
          - run:
              name: run minIO server
              command: |
                wget https://dl.min.io/server/minio/release/linux-amd64/minio -qO minio
                chmod +x minio
                sudo mv minio /usr/local/bin/minio
                minio server /tmp/data
              background: true
              environment:
                MINIO_UPDATE: 'off'
                MINIO_ACCESS_KEY: restfulci
                MINIO_SECRET_KEY: secretpassword

jobs:
  java-unittest:
    executor: java-executor
    steps:
      - checkout
      - inline-postgres/initialize
      - inline-minio/installation

      # This is to support running docker-java related unit tests.
      - setup_remote_docker:
          docker_layer_caching: false

      # We have logic in docker-java code to automatically pull images if not exist.
      # However, CircleCI will error out with permission error, so we need to keep this.
      # > com.github.dockerjava.api.exception.NotFoundException: pull access denied for 83aa35aa1c79,
      # > repository does not exist or may require 'docker login'
      - run: docker pull busybox:1.31

      - run: sed -i "s/spring.profiles.active=dev/spring.profiles.active=circleci/g" master-api/src/main/resources/application.properties
      - run: sed -i "s/spring.profiles.active=dev/spring.profiles.active=circleci/g" master-slave-shared/src/main/resources/application.properties
      - run: sed -i "s/spring.profiles.active=dev/spring.profiles.active=circleci/g" slave-agent/src/main/resources/application.properties

      - run: mvn test

      - run:
          name: Save test results
          command: |
            mkdir -p ~/unittest-results/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/unittest-results/ \;
          when: always
      - store_test_results:
          path: ~/unittest-results

  java-integration-test:
    executor: java-executor
    steps:
      - checkout
      - inline-postgres/initialize
      - inline-minio/installation

      - run: sed -i "s/spring.profiles.active=dev/spring.profiles.active=circleci/g" master-api/src/main/resources/application.properties
      - run: sed -i "s/spring.profiles.active=dev/spring.profiles.active=circleci/g" master-slave-shared/src/main/resources/application.properties
      - run: sed -i "s/spring.profiles.active=dev/spring.profiles.active=circleci/g" slave-agent/src/main/resources/application.properties

      - run: mvn verify -Dskip.unittest=true

      - run:
          name: Save test results
          command: |
            mkdir -p ~/integration-test-results/
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/integration-test-results/ \;
          when: always
      - store_test_results:
          path: ~/integration-test-results

  python-linter:
    executor: python-executor
    steps:
      - checkout

      - run: sudo pip3 install pipenv
      - run: cd e2e-api && pipenv install flake8
      - run: cd e2e-api && pipenv run flake8 --statistics

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - java-unittest
      - java-integration-test
      - python-linter
